function book(titel, author, pages, read) {
  this.titel = titel;
  this.author = author;
  this.pages = pages;
  this.read = "Read" || "Not read" || "in progress";
  this.info = function () {
    return `${titel} by ${author}, ${pages} pages. ${read}`;
  };
}
book.prototype.sayHello = function () {
  return `Hi, i am a good book by ${this.author}`;
};

const dailyStoic = new book("Daily Stoic", "Ryan Holiday", 366, "in progress");
const youCantHurtMe = new book(
  "You Can't Hurt me",
  "David Goggins",
  444,
  "in progress"
);
console.log(dailyStoic.info());
console.log(dailyStoic.sayHello());
console.log(youCantHurtMe.info());
console.log(Object.getPrototypeOf(dailyStoic) === book.prototype);
console.log(Object.getPrototypeOf(youCantHurtMe) === book.prototype);
console.log(dailyStoic.valueOf());
console.log(dailyStoic.hasOwnProperty("valueOf"));
console.log(Object.prototype.hasOwnProperty("valueOf"));

function Person(name) {
  this.name = name;
}

Person.prototype.sayGreet = function () {
  console.log(`Hello, I am ${this.name}`);
};

function player(name, team) {
  this.name = name;
  this.team = team;
}

player.prototype.getTeam = function () {
  console.log(`my team is ${this.team}`);
};
Object.getPrototypeOf(player.prototype);
Object.setPrototypeOf(player.prototype, Person.prototype);
Object.getPrototypeOf(player.prototype);

const player1 = new player("nico", "Uruguay");
const player2 = new player("Milo", "USA");
console.log(player1.sayGreet());
console.log(player2.sayGreet());

console.log(player1.getTeam());
console.log(player2.getTeam());
function Person(name, age) {
  this.name = name;
  this.age = age;
  this.activity = this.activity;
}

const user1 = new Person("nico", 34, "lifting");
const user2 = new Person("didi", 3, "jumping");

Person.prototype.sayHi = function (name, age, workOuts) {
  return `Hi, my name is ${this.name}. I am ${this.age}.`;
};
Person.prototype.work = (name, activity) => {
  return `${this.name} enjoys`;
};
console.log(user1.sayHi());

let x = {};
console.log(Object.getPrototypeOf(x));
console.log(x.__proto__);
function User(name, age, gender) {
  this.name = name;
  this.age = age;
  this.gender = gender;
  this.userKey = function () {
    const char = "abcdefghijklmnopqrstuvwxyz123456789!@#$%^&*()_+{}[]=?.".split(
      ""
    );
    let pasword = [];
    for (let i = 0; i < 10; i++) {
      let random = Math.floor(Math.random() * char.length);
      pasword.push(char[random]);
    }
    return `Your new password: "${pasword.join("")}"`;
  };
}

const me = new User("nico", 34, "Male");
console.log(me);
console.log(me.userKey());
User.prototype.greet = function () {
  return `Hi, my name is ${this.name}. I am ${this.age} years old`;
};
console.log(me.greet());
console.log(Object.getPrototypeOf(User));

// role-playing game.

function Hero(name, level) {
  this.name = name;
  this.level = level;
}

function Warrior(name, level, weapon) {
  Hero.call(this, name, level);
  this.weapon = weapon;
}

function Healer(name, level, spell) {
  Hero.call(this, name, level);
  this.spell = spell;
}

Hero.prototype.greet = function () {
  return `${this.name} say Hi!`;
};

Warrior.prototype.attack = function () {
  return `${this.name} attacks with ${this.weapon}`;
};

Healer.prototype.heal = function () {
  return `${this.name} casts ${this.spell}`;
};

const hero1 = new Hero("didi wu tintin", 1);
const warrior1 = new Warrior("nico", 1, "Axe");
const healer1 = new Healer("siggy", 1, "Black Magik");
Object.setPrototypeOf(Warrior.prototype, Hero.prototype);
Object.setPrototypeOf(Healer.prototype, Hero.prototype);

console.log(hero1);
console.log(warrior1);
console.log(warrior1.attack());
console.log(healer1);
console.log(healer1.heal());
console.log(warrior1.greet());
console.log(healer1.greet());
console.log(Object.getPrototypeOf(hero1));
console.log(Object.getPrototypeOf(Hero));


let animal = {
  eats: true,
  walk() {
    return "walking";
  },
};

let rabbit = {
  jumps: true,
  __proto__: animal,
};

let longEar = {
  earLength: 10,
  __proto__: animal,
};

rabbit.walk = function () {
  return "rabbit! Bounce Bounce";
};
// rabbit.__proto__ = animal;
// console.log(rabbit.eats);
// console.log(rabbit.walk());
console.log(longEar.eats);
console.log(longEar.walk());
console.log(rabbit.walk());
let user = {
  name: "Nicolas",
  surname: "fuentes",

  set fullName(value) {
    [this.name, this.surname] = value.split(" ");
  },
  get fullName() {
    return `${this.name} ${this.surname}`;
  },
};
let admin = {
  __proto__: user,
  isAdmin: true,
};
console.log(admin.fullName);
admin.fullName = "Didi Wu";
console.log(admin.fullName);
console.log(user.fullName);
let animal = {
  eats: true,
  walk() {
    return "Animal walk";
  },
};

let rabbit = {
  jumps: true,
  __proto__: animal,
};
rabbit.walk = function () {
  return "Rabbit, Bounce Bounce!";
};
let longEar = {
  earLength: 10,
  __proto__: rabbit,
};

console.log(rabbit.walk());

let user = {
  name: "Nico",
  surname: "Fuentes",

  set fullName(value) {
    [this.name, this.surname] = value.split(" ");
  },

  get fullName() {
    return `${this.name} ${this.surname}`;
  },
};

let admin = {
  __proto__: user,
  isAdmin: true,
};
console.log(admin.fullName);

admin.fullName = "Didi Wu";

console.log(admin.fullName);
console.log(user.fullName);

let animal = {
  eats: true,
};

let rabbit = {
  jumps: true,
  __proto__: animal,
};

// Object.keys only returns own keys
console.log(Object.keys(rabbit)); // jumps

// for..in loops over both own and inherited keys
for (let prop in rabbit) console.log(prop); // jumps, then eats

for (let prop in rabbit) {
  let isOwn = rabbit.hasOwnProperty(prop);

  if (isOwn) {
    console.log(`Our: ${prop}`); // Our: jumps
  } else {
    console.log(`Inherited: ${prop}`); // Inherited: eats
  }
}

let head = {
  glasses: 1,
};

let table = {
  pen: 3,
  __proto__: head,
};

let bed = {
  sheet: 1,
  pillow: 2,
  __proto__: table,
};

let pockets = {
  money: 2000,
  __proto__: bed,
};
let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};
let hamster = {
  stomach: [],

  eat(food) {
    this.stomach = [food];
  },
};

let speedy = {
  __proto__: hamster,
};

let lazy = {
  __proto__: hamster,
};

// This one found the food
speedy.eat("apple");
console.log(speedy.stomach); // apple

// This one also has it, why? fix please.
console.log(lazy.stomach); // 
function sum(a, b) {
  this.mynum = 11;
  return a + b;
}
sum();
console.log(sum(6, 2));
let sumNum = mynum + 11;
console.log(sumNum);

const calc = {
  num: 0,
  increment() {
    // console.log(this === calc); // => true
    this.num += 1;
    return this.num;
  },
};
console.log(calc.increment());
console.log(calc.increment());
console.log(calc.increment());
console.log(calc.increment());

function User(name, age) {
  this.name = name;
  this.age = age;
}
User.prototype.talk = function () {
  return `Hi, my name is ${this.name}. I am ${this.age} years old`;
};
const me = new User("nico", 34);
console.log(me);
console.log(me.talk());

let arr = ["nico", "fuentes"];
let object = {
  name: "nico",
  city: "Kearny",
  getIntro: function () {
    console.log(`Hi min name is ${this.name}. I'm from ${this.city}`);
  },
};

console.log(arr.__proto__);
console.log(arr.__proto__.__proto__ === Object.prototype);
console.log(Object.__proto__ === Object.prototype);
console.log(Object.__proto__.__proto__ === Object.prototype);
const user = {
  firstName: "nico",
  lastName: "Fuentes",
  hobbies: ["programing", "reading"],
  listHobbies: function () {
    this.hobbies.forEach((hobby) => {
      console.log(this.firstName);
      console.log(hobby);
    });
  },
};
console.log(user.listHobbies());
function Users(name) {
  this.name = name;
  console.log(this);
}

const nico = new Users("nico");
console.log(nico);
let fruit = "nico";

let bag = {
  [fruit]: 5, // the name of the property is taken from the variable fruit
};
console.log(bag.nico);
function User(name, age, state) {
//   (this.name = name), (this.age = age), (this.state = state);
// }

// const nico = new User("nico", 34, "New Jersey");
// // console.log(nico);
// for (key in nico) {
//   console.log(key);
//   //   console.log(nico[key]);
// }
let schedule = {};
function isEmpty(obj) {
  for (key in obj) {
    return false;
  }
  return true;
}
console.log(isEmpty(schedule));
let salaries = {
  John: 100,
  Ann: 160,
  Pete: 130,
};
let sum = 0;
for (let key in salaries) {
  sum += salaries[key];
}
console.log(sum);
function sumSalaries(obj) {
  let sum = 0;
  for (let key in obj) {
    sum += obj[key];
  }
  return sum;
}
console.log(salaries);
let menu = {
  width: 200,
  height: 300,
  title: "My menu",
};

function multiplyNumeric(obj) {
  for (let key in obj) {
    if (typeof obj[key] == "number") {
      obj[key] *= 2;
    }
  }
}
multiplyNumeric(menu);
console.log(menu);
let menu = {
  width: 200,
  height: 300,
  title: "My menu",
};

function multiplyNumeric(obj) {
  for (let key in obj) {
    if (typeof obj[key] == "number") {
      obj[key] *= 2;
    }
  }
}
multiplyNumeric(menu);
console.log(menu);
const inventors = [
  { first: "Albert", last: "Einstein", year: 1879, passed: 1955 },
  { first: "Isaac", last: "Newton", year: 1643, passed: 1727 },
  { first: "Galileo", last: "Galilei", year: 1564, passed: 1642 },
  { first: "Marie", last: "Curie", year: 1867, passed: 1934 },
  { first: "Johannes", last: "Kepler", year: 1571, passed: 1630 },
  { first: "Nicolaus", last: "Copernicus", year: 1473, passed: 1543 },
  { first: "Max", last: "Planck", year: 1858, passed: 1947 },
  { first: "Katherine", last: "Blodgett", year: 1898, passed: 1979 },
  { first: "Ada", last: "Lovelace", year: 1815, passed: 1852 },
  { first: "Sarah E.", last: "Goode", year: 1855, passed: 1905 },
  { first: "Lise", last: "Meitner", year: 1878, passed: 1968 },
  { first: "Hanna", last: "Hammarstr√∂m", year: 1829, passed: 1909 },
];

const people = [
  "Bernhard, Sandra",
  "Bethea, Erin",
  "Becker, Carl",
  "Bentsen, Lloyd",
  "Beckett, Samuel",
  "Blake, William",
  "Berger, Ric",
  "Beddoes, Mick",
  "Beethoven, Ludwig",
  "Belloc, Hilaire",
  "Begin, Menachem",
  "Bellow, Saul",
  "Benchley, Robert",
  "Blair, Robert",
  "Benenson, Peter",
  "Benjamin, Walter",
  "Berlin, Irving",
  "Benn, Tony",
  "Benson, Leana",
  "Bent, Silas",
  "Berle, Milton",
  "Berry, Halle",
  "Biko, Steve",
  "Beck, Glenn",
  "Bergman, Ingmar",
  "Black, Elk",
  "Berio, Luciano",
  "Berne, Eric",
  "Berra, Yogi",
  "Berry, Wendell",
  "Bevan, Aneurin",
  "Ben-Gurion, David",
  "Bevel, Ken",
  "Biden, Joseph",
  "Bennington, Chester",
  "Bierce, Ambrose",
  "Billings, Josh",
  "Birrell, Augustine",
  "Blair, Tony",
  "Beecher, Henry",
  "Biondo, Frank",
];

// Array.prototype.filter()
// 1. Filter the list of inventors for those who were born in the 1500's
const inventYear = inventors.filter((inventor) => {
  if (inventor.year >= 1500 && inventor.year <= 1599) {
    return true;
  }
});
console.table(inventYear);
// Array.prototype.map()
// 2. Give us an array of the inventors first and last names
const fullNames = inventors.map(
  (inventor) => `${inventor.first}  ${inventor.last}`
);
console.table(fullNames);
// Array.prototype.sort()
// 3. Sort the inventors by birthdate, oldest to youngest
const sortBD = inventors.sort(function (firstPerson, secondPerson) {
  if (firstPerson.year > secondPerson.year) {
    return 1;
  } else {
    return -1;
  }
});
console.log(sortBD);
// Array.prototype.reduce()
// 4. How many years did all the inventors live all together?
const totalYears = inventors.reduce((total, inventor) => {
  return total + (inventor.passed - inventor.year);
}, 0);
console.log(totalYears);
// 5. Sort the inventors by years lived
const oldest = inventors.sort(function (a, b) {
  const aYear = a.passed - a.year;
  const byear = b.passed - b.year;
  if (aYear > byear) {
    return -1;
  } else {
    return 1;
  }
});
console.log(oldest);
// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris
/* const category = document.querySelector(".mw-category");
const links = [...category.querySelectorAll("a")];
const de = links
  .map((link) => link.textContent)
  .filter((streetName) => streetName.includes("de")); */
// 7. sort Exercise
// Sort the people alphabetically by last name
const alpha = people.sort(function (lastOne, firstOne) {
  const [aLast, aFirst] = lastOne.split(", ");
  const [bLast, bFirst] = firstOne.split(", ");
  return aLast > bLast ? 1 : -1;
});
console.log(alpha);
// 8. Reduce Exercise
// Sum up the instances of each of these
const data = [
  "car",
  "car",
  "truck",
  "truck",
  "bike",
  "walk",
  "car",
  "van",
  "bike",
  "walk",
  "car",
  "van",
  "car",
  "truck",
];

const transport = data.reduce(function (obj, item) {
  if (!obj[item]) {
    obj[item] = 0;
  }
  obj[item]++;
  return obj;
}, {});
console.log(transport);
function Book(title, author, pages, read) {
  this.titel = title;
  this.author = author;
  this.pages = pages;
  this.read = read;
}
Book.prototype.info = function () {
  return `${this.titel} by ${this.author} has ${this.pages} pages. Status: ${this.read}. `;
};
const dailyStoic = new Book("Daily Stoic", "Rayan Holiday", 369, "reading");
const beHereNow = new Book("Be Here now", "Ram Dass", 366, "not read yet");
console.log(dailyStoic);
function Player(name, marker) {
  this.name = name;
  this.marker = marker;
}
Player.prototype.getMarker = function () {
  console.log(`My marker is '${this.marker}'`);
};

function Person(name) {
  this.name = name;
}

Person.prototype.sayName = function () {
  console.log(`Hi! my name is ${this.name}`);
};

Object.setPrototypeOf(Player.prototype, Person.prototype);

const playerOne = new Player("nico", "X");
const playerTwo = new Player("Siggy", "O");
const playerThree = new Player("Didi Wu Tintin", "@");
playerOne.sayName();

let x = {};
console.log(x.__proto__ === Object.prototype);
console.log(Object.getPrototypeOf(x));
console.log(x.constructor);

let y = [];
console.log(y.__proto__.__proto__);
console.log(y.__proto__ === Array.prototype);
console.log(y.__proto__.__proto__ === Object.prototype);

Array.prototype.isPrototypeOf(y); // true
Object.prototype.isPrototypeOf(Array); // true

y instanceof Array; // true
// Initialize a constructor function for a new Hero
function Hero(name, level) {
  this.name = name;
  this.level = level;
}

// Add greet method to the Hero prototype
Hero.prototype.greet = function () {
  return `${this.name} says hello.`;
};

function Warrior(name, level, weapon) {
  Hero.call(this, name, level);
  this.weapon = weapon;
}
// Initialize Healer constructor
function Healer(name, level, spell) {
  Hero.call(this, name, level);

  this.spell = spell;
}

Object.setPrototypeOf(Warrior.prototype, Hero.prototype);
Object.setPrototypeOf(Healer.prototype, Hero.prototype);

// All other prototype methods added below
Warrior.prototype.attack = function () {
  return `${this.name} attacks with the ${this.weapon}.`;
};

Healer.prototype.heal = function () {
  return `${this.name} casts ${this.spell}.`;
};

const hero1 = new Hero("Didi Wu TinTin", 1);
const hero2 = new Warrior("Nico", 1, "axe");
const hero3 = new Healer("Siggy", 1, "Black Magick");

console.log(hero1);
console.log(Object.getPrototypeOf(hero1)); //Hero
console.log(hero1.greet());
console.log(hero2.attack());
console.log(hero2.greet());